#gems ruby1.9j
http://isitruby19.com/

#performance
# 
tracing method slowness http://tenderlovemaking.com/2011/06/29/i-want-dtrace-probes-in-ruby/ (and see  https://github.com/tmm1/perftools.rb )


.irbrc

class Symbol
 def <=>(other)
   self.to_s <=> other.to_s
  end
end

ever used a pebble? just saw a note I wrote to myself about this a while ago. Throw it in your code, and see where it goes.  You can recover lost requirements (maybe). From Noel Rappin's testing legacy code
http://assets.en.oreilly.com/1/event/59/Test%20Your%20Legacy%20Code%20Presentation.pdf
https://speakerd.s3.amazonaws.com/presentations/4eb7fd5db029470051010f8b/legacy_ruby_midwest.pdf


class Pebble
  def initialize(name)
    @name = name
  end

  def method_missing(method_name, *args)
    p "#{method_name}(#{args.join(", ")}) from
       #{caller_method}"
    self
  end
  
  def caller_method(depth = 1)
    parse_caller(caller(depth+1).first).last
  end

  def parse_caller(at)
    if /^(.+?):(\d+)(?::in `(.*)')?/ =~ at
      file	= Regexp.last_match[1]
      line	= Regexp.last_match[2].to_i 
      method = Regexp.last_match[3] 
      [file, line, method]
    end
  end
end